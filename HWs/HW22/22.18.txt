% MotionGenesis file:  22.18.txt
% Copyright (c) 2009-2021 Motion Genesis LLC.
%--------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  N                % Example: Earth.
RigidBody       A                % Example: Upper forearm.
RigidBody      	B                % Comment.
Point           AH( A )
Point           BN( B )
%--------------------------------------------------------------------
%   Mathematical declarations.
Variable    theta'', w', y''
%Constant    g = 9.80665 m/s^2    % Earth's gravitational acceleration.

Constant	L = 1.5 m
Constant	r = 0.25 m
Constant	k = 9000 N/m
Constant	b = 900 N*s/m
Constant	m = 20 kg
Constant	IA = 400 kg*m^2
Constant	IB = 0.5*m*r^2
Constant	JB = 0.25*m*r^2
Constant	v = 10 m/sec
%--------------------------------------------------------------------
%   Mass and inertia properties.
A.SetMass( 0 )
B.SetMass( m )
A.SetInertia( AH,  0,  0,  IA )
B.SetInertia( Bcm, A, JB, IB, JB )
%--------------------------------------------------------------------
%   Rotational kinematics.
A.RotateZ( N, theta )
B.SetAngularVelocity( A, w*Ay> )
%--------------------------------------------------------------------
%   Translational kinematics.
AH.SetVelocityAcceleration( N, v*Nx> )
Ao.Translate( AH, -L*Ax> )
Bcm.Translate( Ao, y*Ay> )
BN.SetPositionVelocity( Bcm, -r*Az> )
%--------------------------------------------------------------------
%   Motion constraints (if any).
MotionConstraint[1] = Dot( BN.GetVelocity(N), Ax> )
MotionConstraint[2] = Dot( BN.GetVelocity(N), Ay> )
SolveDt( MotionConstraint = 0,  w, y' )
% We only need to solve for w', the other one for specific circumstances doesn't need to be differentiated.

%--------------------------------------------------------------------
%   Add relevant contact/distance forces.
Bcm.AddForce( Ao, -(k*y + b*y')*Ay> )

SetGeneralizedSpeeds( theta', y', w )
Eq = System.GetDynamicsKane()

Solve( Eq := 0, theta'', y'', w' ) 

Input  tFinal = 8 sec,  tStep = 0.04 sec,  absError = 1.0E-07
Input  theta = 1 deg, y = 0 cm, theta' = 0 rad/sec
OutputPlot t sec, theta deg
OutputPlot t sec, y cm
ODE ()
v := -5
ODE()
v := 20
ODE()
Save 22.18.html
quit

%--------------------------------------------------------------------
%   Add relevant torques.
A.AddTorque( SomeVector> )                  % External torque.
B.AddTorque( A, actionReactionTorque> )     % Law of action/reaction.
%--------------------------------------------------------------------
%   Translational dynamic equations (F = m*a).
%   For static analysis, use  B.GetStatics()  or  System.GetStatics().
Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
%--------------------------------------------------------------------
%   Rotational dynamic equations (M = DH/Dt + ...).
%   For static analysis, use  B.GetStatics( aboutPoint ).
Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
%--------------------------------------------------------------------
%   Solve algebraic equations for list of unknowns.
Solve( Dynamics = 0,   x'', y'', Fx, Fy )
%--------------------------------------------------------------------
%   Energy calculations (if needed).
Variable workDone' = Dot( someForce>, someVelocity> )
KE = System.GetKineticEnergy()
PEgravity = System.GetForceGravityPotentialEnergy( -g*Ny>, No )
MechanicalEnergy = KE + PEgravity - workDone
%--------------------------------------------------------------------
%   Momentum calculations (if needed).
H> = System.GetAngularMomentum( aboutPoint )
L> = EvaluateToNumber( System.GetLinearMomentum() )
%--------------------------------------------------------------------
%   Other calculations (e.g., for output).
xQ = Dot(  Q.GetPosition(No),  Nx>  )
%--------------------------------------------------------------------
%   Set initial values for variables (for subsequent ODE command).
Input  qA = 30 deg,  qA' = 0 rad/sec
Input  qB = 90 deg,  qB' = 0 rad/sec
%--------------------------------------------------------------------
%   List output quantities (e.g., from the ODE command).
Output      t sec,  x m,  Fx Newton,  Fy Newton
OutputPlot  t sec,  qA degrees  qB degrees
%--------------------------------------------------------------------
%   Set numerical integration parameters and solve ODEs.
%   Or auto-generate MATLAB, C, or Fortran code.
Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-07
ODE()  Filename    % or ODE( Zero = 0, listOfVariablesToSolve ) Filename.m
%--------------------------------------------------------------------
%   Record input together with responses.
Save  someFileName.html
Quit

