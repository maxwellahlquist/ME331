% MotionGenesis file:  22.19.txt
% Copyright (c) 2009-2021 Motion Genesis LLC.
%--------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  N                % Example: Earth.
RigidBody       A
RigidBody      	B
RigidBody      	C
Point           BN( B )
Point           CN( C )
%--------------------------------------------------------------------
%   Mathematical declarations.
Variable    v', w'
Variable    wB', wC'

Constant	R = 0.35 m
Constant	b = 0.75 m
Constant	a = 1.64 m
Constant	mA = 640 kg
Constant	m = 30 kg
Constant	IA = 166.6 kg*m^2
Constant	J = 2 kg*m^2
Constant	K = 1 kg*m^2
%--------------------------------------------------------------------
%   Mass and inertia properties.
A.SetMass( mA )
B.SetMass( m )
C.SetMass( m )
A.SetInertia( Acm,  0,  0,  IA )
B.SetInertia( Bcm, A, K, J, K )
C.SetInertia( Ccm, A, K, J, K )
%--------------------------------------------------------------------
%   Rotational kinematics.
A.SetAngularVelocity( N, w*Az> )
B.SetAngularVelocity( A, wB*Ay> )
C.SetAngularVelocity( A, wC*Ay> )
%--------------------------------------------------------------------
%   Translational kinematics.
Ao.SetVelocityAcceleration( N, v*Ax> )
Acm.Translate( Ao, a*Ax> )
Bcm.Translate( Ao, -b*Ay> )
Ccm.Translate( Ao, b*Ay> )
BN.SetPositionVelocity( Bcm, -r*Az> )
CN.SetPositionVelocity( Ccm, -r*Az> )
%--------------------------------------------------------------------
%   Motion constraints (if any).
MotionConstraint[1] = Dot( BN.GetVelocity(N), Ax> )
MotionConstraint[2] = Dot( CN.GetVelocity(N), Ax> )
SolveDT(MotionConstraint = 0, wB, wC)

%--------------------------------------------------------------------

SetGeneralizedSpeeds( v, w )
Eq = System.GetDynamicsKane()
Solve(System.GetGeneralizedEffectiveForce() = 0, w', v' ) % This gave the correct answer...

Input  tFinal = 1 sec,  tStep = 0.02 sec,  absError = 1.0E-07
Input  v = 25 m/sec, w = 0.01 rad/sec
OutputPlot t sec, v m/s
OutputPlot t sec, w rad/sec
ODE (Eq := 0, v', w')
Input  v := -25 m/sec, w = 0.01 rad/sec
ODE (Eq := 0, v', w')
Save 22.19.html
quit

%--------------------------------------------------------------------
%   Add relevant torques.
A.AddTorque( SomeVector> )                  % External torque.
B.AddTorque( A, actionReactionTorque> )     % Law of action/reaction.
%--------------------------------------------------------------------
%   Translational dynamic equations (F = m*a).
%   For static analysis, use  B.GetStatics()  or  System.GetStatics().
Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
%--------------------------------------------------------------------
%   Rotational dynamic equations (M = DH/Dt + ...).
%   For static analysis, use  B.GetStatics( aboutPoint ).
Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
%--------------------------------------------------------------------
%   Solve algebraic equations for list of unknowns.
Solve( Dynamics = 0,   x'', y'', Fx, Fy )
%--------------------------------------------------------------------
%   Energy calculations (if needed).
Variable workDone' = Dot( someForce>, someVelocity> )
KE = System.GetKineticEnergy()
PEgravity = System.GetForceGravityPotentialEnergy( -g*Ny>, No )
MechanicalEnergy = KE + PEgravity - workDone
%--------------------------------------------------------------------
%   Momentum calculations (if needed).
H> = System.GetAngularMomentum( aboutPoint )
L> = EvaluateToNumber( System.GetLinearMomentum() )
%--------------------------------------------------------------------
%   Other calculations (e.g., for output).
xQ = Dot(  Q.GetPosition(No),  Nx>  )
%--------------------------------------------------------------------
%   Set initial values for variables (for subsequent ODE command).
Input  qA = 30 deg,  qA' = 0 rad/sec
Input  qB = 90 deg,  qB' = 0 rad/sec
%--------------------------------------------------------------------
%   List output quantities (e.g., from the ODE command).
Output      t sec,  x m,  Fx Newton,  Fy Newton
OutputPlot  t sec,  qA degrees  qB degrees
%--------------------------------------------------------------------
%   Set numerical integration parameters and solve ODEs.
%   Or auto-generate MATLAB, C, or Fortran code.
Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-07
ODE()  Filename    % or ODE( Zero = 0, listOfVariablesToSolve ) Filename.m
%--------------------------------------------------------------------
%   Record input together with responses.
Save  someFileName.html
Quit

