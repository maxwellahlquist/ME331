% MotionGenesis file:  22.9.txt
% Copyright (c) 2009-2021 Motion Genesis LLC.
%--------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  N                % Example: Earth.
RigidBody       A
RigidBody       B
RigidBody       C
Point           P
Point           BC ( B )
Point           CB ( C )
%--------------------------------------------------------------------
%   Mathematical declarations.
Variable    qA'', qB'', qC''
%Variable    Rx, Rz

Constant    g = 9.80665 m/s^2    % Earth's gravitational acceleration.
Constant    LN = 2 m
Constant    L = 4 m
Constant    m = 3 kg
Constant    I = m*L^2/12	% This may or may not be the right formula
Constant    wd = (pi/4) rad/sec

Specified   TA = 960*(wd - qA')
%--------------------------------------------------------------------
%   Mass and inertia properties.
A.SetMass( m )
B.SetMass( m )
C.SetMass( m )

A.SetInertia( Acm,  0,  I,  0 )
B.SetInertia( Bcm,  0,  I,  0 )
C.SetInertia( Ccm,  0,  I,  0 )
%--------------------------------------------------------------------
%   Rotational kinematics.
A.RotateY( N, qA )
B.RotateY( A, qB )
C.RotateY( N, qC )
%--------------------------------------------------------------------
%   Translational kinematics.
Ao.Translate( No, 0> )
Acm.Translate( No, L/2*Ax> )
Bo.Translate( Ao, L*Ax> )
Bcm.Translate( Bo, L/2*Bx> )
Co.Translate( No, -LN*Nx> )
Ccm.Translate( Co, L/2*Cx> )
CB.Translate( Co, L*Cx> )
BC.Translate( CB, 0> )
P.Translate( Bo, 2*Bx> - 2*Bz> )
%--------------------------------------------------------------------
%   Motion constraints (if any).
Loop> = L*(Ax> + Bx> - Cx>) + LN*Nx>
Loop[1] = Dot( Loop>, Nx> )
Loop[2] = Dot( Loop>, Nz> )
Solve( DT(Loop) = 0,  qB', qC' )
Solve( DT(DT(Loop)) = 0,  qB'', qC'' )
%--------------------------------------------------------------------
%   Add relevant contact/distance forces.
System.AddForceGravity( -g*Nz> )            % Add's gravity force to each massive object.

%--------------------------------------------------------------------
%   Translational dynamic equations (F = m*a).
%   For static analysis, use  B.GetStatics()  or  System.GetStatics().

SetGeneralizedSpeeds( qA' )
Statics = System.GetStaticsKane()
Equations = [Loop; Statics]

SolveSetInput( Equations = 0, qA = 70 deg, qB = 100 deg, qC = 100 deg)

A.AddTorque( TA*Ny> )                  % External torque.
Dynamics = System.GetDynamicsKane()
Solve(Dynamics = 0, qA'')
Equations := [Loop; Dynamics]
x = Dot(P.GetPosition(No), Nx> )
z = Dot(P.GetPosition(No), Nz> )

Input  tFinal = 9 sec,  tStep = 0.02 sec,  absError = 1.0E-07
Input qA' = 0
OutputPlot  x m, z m
ODE ()

stop
quit
Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
%--------------------------------------------------------------------
%   Rotational dynamic equations (M = DH/Dt + ...).
%   For static analysis, use  B.GetStatics( aboutPoint ).
Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
%--------------------------------------------------------------------
%   Solve algebraic equations for list of unknowns.
Solve( Dynamics = 0,   x'', y'', Fx, Fy )
%--------------------------------------------------------------------
%   Energy calculations (if needed).
Variable workDone' = Dot( someForce>, someVelocity> )
KE = System.GetKineticEnergy()
PEgravity = System.GetForceGravityPotentialEnergy( -g*Ny>, No )
MechanicalEnergy = KE + PEgravity - workDone
%--------------------------------------------------------------------
%   Momentum calculations (if needed).
H> = System.GetAngularMomentum( aboutPoint )
L> = EvaluateToNumber( System.GetLinearMomentum() )
%--------------------------------------------------------------------
%   Other calculations (e.g., for output).
xQ = Dot(  Q.GetPosition(No),  Nx>  )
%--------------------------------------------------------------------
%   Set initial values for variables (for subsequent ODE command).
Input  qA = 30 deg,  qA' = 0 rad/sec
Input  qB = 90 deg,  qB' = 0 rad/sec
%--------------------------------------------------------------------
%   List output quantities (e.g., from the ODE command).
Output      t sec,  x m,  Fx Newton,  Fy Newton
OutputPlot  t sec,  qA degrees  qB degrees
%--------------------------------------------------------------------
%   Set numerical integration parameters and solve ODEs.
%   Or auto-generate MATLAB, C, or Fortran code.
Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-07
ODE()  Filename    % or ODE( Zero = 0, listOfVariablesToSolve ) Filename.m
%--------------------------------------------------------------------
%   Record input together with responses.
Save  someFileName.html
Quit

