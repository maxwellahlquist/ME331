% MotionGenesis file:  22.15.txt
% Copyright (c) 2009-2021 Motion Genesis LLC.
%--------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  N                % Example: Earth.
RigidBody       A                % Example: Upper forearm.
RigidBody      	B                % Comment.
Point           AN( A )
%--------------------------------------------------------------------
%   Mathematical declarations.
Variable    x'', y''
Variable    wx', wy', wz'
Variable    R{1:3}{1:3}'	% R23 == Ryz
Constant    g = 9.80665 m/s^2    % Earth's gravitational acceleration.
Constant    omega
Constant    I, J, K
Constant    r
Constant    mA, mB, m = mA + mB
%--------------------------------------------------------------------
%   Mass and inertia properties.
A.SetMass( mA )
B.SetMass( mB )
A.SetInertia( Acm,  I,  I,  I )
B.SetInertia( Bcm, A, J, J, K )
%--------------------------------------------------------------------
%   Rotational kinematics.
A.SetAngularVelocity( N, wx*Ax> + wy*Ay> + wz*Az> )
%A.SetRotationMatrixODE( N, [R11, R12, R13; R21, R22, R23; R31, R32, R33] )
A.SetRotationMatrixODE( N, Poisson, R11, R12, R13, R21, R22, R23, R31, R32, R33 )
B.SetAngularVelocity( A, omega*Az> )
%--------------------------------------------------------------------
%   Translational kinematics.
Acm.Translate( No, x*Nx> + y*Ny> + r*Nz> )
Bcm.Translate( Acm, 0> )
AN.SetPositionVelocity( Acm, -r*Nz> )
%AN.GetAcceleration( Acm, -r*Nz> ) % Probably doesn't need to run

%--------------------------------------------------------------------
%   Motion constraints (if any).
MotionConstraint[1] = Dot( AN.GetVelocity( N ), Nx> )
MotionConstraint[2] = Dot( AN.GetVelocity( N ), Ny> )
MotionConstraintDT = DT( MotionConstraint )

Solve( [MotionConstraint, MotionConstraintDT], x', y', x'', y'' )

SetGeneralizedSpeeds(wx, wy, wz)
eqs = System.GetDynamicsKane()

FactorQuadratic(eqs, wx, wy, wz )
matrix = Exclude (GetCoefficientMatrix( eqs, wx', wy', wz' ), wx', wy', wz')
rhs = -1*Exclude( eqs, wx', wy', wz' )
KE = System.GetKineticEnergy()
Save 22.15.html
quit
OutputPlot x m, y m
ODE(eqs = 0, wx', wy', wz')
stop

quit


MotionConstraint[1] = Dot( Q.GetVelocity(N), Ax> )
MotionConstraint[2] = Dot( Q.GetVelocity(N), Ay> )
SolveDt( MotionConstraint = 0,  varName1, varName2 )
%--------------------------------------------------------------------
%   Add relevant contact/distance forces.
System.AddForceGravity( -g*Ny> )            % Add's gravity force to each massive object.
Q.AddForce( someVector> )                   % External force.
Q.AddForce( P, actionReactionForce> )       % Law of action/reaction.
%--------------------------------------------------------------------
%   Add relevant torques.
A.AddTorque( SomeVector> )                  % External torque.
B.AddTorque( A, actionReactionTorque> )     % Law of action/reaction.
%--------------------------------------------------------------------
%   Translational dynamic equations (F = m*a).
%   For static analysis, use  B.GetStatics()  or  System.GetStatics().
Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
%--------------------------------------------------------------------
%   Rotational dynamic equations (M = DH/Dt + ...).
%   For static analysis, use  B.GetStatics( aboutPoint ).
Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
%--------------------------------------------------------------------
%   Solve algebraic equations for list of unknowns.
Solve( Dynamics = 0,   x'', y'', Fx, Fy )
%--------------------------------------------------------------------
%   Energy calculations (if needed).
Variable workDone' = Dot( someForce>, someVelocity> )
KE = System.GetKineticEnergy()
PEgravity = System.GetForceGravityPotentialEnergy( -g*Ny>, No )
MechanicalEnergy = KE + PEgravity - workDone
%--------------------------------------------------------------------
%   Momentum calculations (if needed).
H> = System.GetAngularMomentum( aboutPoint )
L> = EvaluateToNumber( System.GetLinearMomentum() )
%--------------------------------------------------------------------
%   Other calculations (e.g., for output).
xQ = Dot(  Q.GetPosition(No),  Nx>  )
%--------------------------------------------------------------------
%   Set initial values for variables (for subsequent ODE command).
Input  qA = 30 deg,  qA' = 0 rad/sec
Input  qB = 90 deg,  qB' = 0 rad/sec
%--------------------------------------------------------------------
%   List output quantities (e.g., from the ODE command).
Output      t sec,  x m,  Fx Newton,  Fy Newton
OutputPlot  t sec,  qA degrees  qB degrees
%--------------------------------------------------------------------
%   Set numerical integration parameters and solve ODEs.
%   Or auto-generate MATLAB, C, or Fortran code.
Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-07
ODE()  Filename    % or ODE( Zero = 0, listOfVariablesToSolve ) Filename.m
%--------------------------------------------------------------------
%   Record input together with responses.
Save  someFileName.html
Quit

