% MotionGenesis file:  MGTemplateBasic.txt
% Copyright (c) 2009-2021 Motion Genesis LLC.
%--------------------------------------------------------------------
%   Mathematical declarations.
Constant    	Rv = 315.5 psi*s/L, V = 4 L
Constant	M = 0.02897, Temp = 298, R = 0.08206*14.7 % in units for psi
%Constant	a = 1.4*14.7 psi*L^2/mol^2, b = 0.039 L/mol
Constant	a = 1.4*14.7 psi*L^2, b = 0.039 L
Variable	P1', P2'
Variable	n1' = P1/(R*Temp)*(P1/Rv)/M
Variable	n2' = P2/(R*Temp)*(P2/Rv)/M
P1' = (2*n1*a/(V*R*Temp) - (V - 2*n1*b) / (V - n1*b))* P1^2 / Rv
P2' = -1/(V*Rv)*P2^2

Input tFinal = 60 sec, P1 = 60 psi, P2 = 60 psi, tStep = 0.05 sec
Input n1 = 0.68632, n2 = 0.68632, absError = 1e-3
Output t sec, n1, n2
OutputPlot t, P1, P2
ODE()


stop
%--------------------------------------------------------------------
%   Mass and inertia properties.
A.SetMass( mA = 2 kg )
Q.SetMass( mQ = 3 kg )
A.SetInertia( Acm,  IAxx = 0.2 kg*m^2,  IAyy = 0.3 kg*m^2,  IAzz = 0.4 kg*m^2 )
B.SetInertia( Bcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
%--------------------------------------------------------------------
%   Rotational kinematics.
A.RotateX( N, qA )
B.RotateNegativeY( A, qB )
C.SetAngularVelocity( N, someVector> )
%--------------------------------------------------------------------
%   Translational kinematics.
Q.SetPosition( No, positionVector> )
Q.Translate( No, positionVector> )          % Sets position, velocity, acceleration.
Q.SetVelocityAcceleration( N, velVector> )  % Differentiates to find acceleration.
%--------------------------------------------------------------------
%   Motion constraints (if any).
MotionConstraint[1] = Dot( Q.GetVelocity(N), Ax> )
MotionConstraint[2] = Dot( Q.GetVelocity(N), Ay> )
SolveDt( MotionConstraint = 0,  varName1, varName2 )
%--------------------------------------------------------------------
%   Add relevant contact/distance forces.
System.AddForceGravity( -g*Ny> )            % Add's gravity force to each massive object.
Q.AddForce( someVector> )                   % External force.
Q.AddForce( P, actionReactionForce> )       % Law of action/reaction.
%--------------------------------------------------------------------
%   Add relevant torques.
A.AddTorque( SomeVector> )                  % External torque.
B.AddTorque( A, actionReactionTorque> )     % Law of action/reaction.
%--------------------------------------------------------------------
%   Translational dynamic equations (F = m*a).
%   For static analysis, use  B.GetStatics()  or  System.GetStatics().
Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
%--------------------------------------------------------------------
%   Rotational dynamic equations (M = DH/Dt + ...).
%   For static analysis, use  B.GetStatics( aboutPoint ).
Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
%--------------------------------------------------------------------
%   Solve algebraic equations for list of unknowns.
Solve( Dynamics = 0,   x'', y'', Fx, Fy )
%--------------------------------------------------------------------
%   Energy calculations (if needed).
Variable workDone' = Dot( someForce>, someVelocity> )
KE = System.GetKineticEnergy()
PEgravity = System.GetForceGravityPotentialEnergy( -g*Ny>, No )
MechanicalEnergy = KE + PEgravity - workDone
%--------------------------------------------------------------------
%   Momentum calculations (if needed).
H> = System.GetAngularMomentum( aboutPoint )
L> = EvaluateToNumber( System.GetLinearMomentum() )
%--------------------------------------------------------------------
%   Other calculations (e.g., for output).
xQ = Dot(  Q.GetPosition(No),  Nx>  )
%--------------------------------------------------------------------
%   Set initial values for variables (for subsequent ODE command).
Input  qA = 30 deg,  qA' = 0 rad/sec
Input  qB = 90 deg,  qB' = 0 rad/sec
%--------------------------------------------------------------------
%   List output quantities (e.g., from the ODE command).
Output      t sec,  x m,  Fx Newton,  Fy Newton
OutputPlot  t sec,  qA degrees  qB degrees
%--------------------------------------------------------------------
%   Set numerical integration parameters and solve ODEs.
%   Or auto-generate MATLAB, C, or Fortran code.
Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-07
ODE()  Filename    % or ODE( Zero = 0, listOfVariablesToSolve ) Filename.m
%--------------------------------------------------------------------
%   Record input together with responses.
Save  someFileName.html
Quit

