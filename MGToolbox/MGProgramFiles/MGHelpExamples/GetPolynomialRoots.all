   (1) %--------------------------------------------------------------------
   (2) % Example 1: GetLinearRoots     (roots of linear equation).
   (3) %--------------------------------------------------------------------
   (4) Variable x
   (5) Constant a, b, c
   (6) root1A = GetLinearRoot( a*x = b,  x )
-> (7) root1A = b/a

   (8) root1B = GetLinearRoot( [a; -b] )
-> (9) root1B = b/a

   (10) %--------------------------------------------------------------------
   (11) % Example 2: GetQuadraticRoots  (roots of quadratic equation).
   (12) %--------------------------------------------------------------------
   (13) root2A = GetQuadraticRoots( a*x^2 + b*x + c = 0,  x )
-> (14) root2A[1] = -0.5*(b+sqrt(b^2-4*a*c))/a
-> (15) root2A[2] = -0.5*(b-sqrt(b^2-4*a*c))/a

   (16) positiveRootA = GetQuadraticPositiveRoot( a*x^2 + b*x + c = 0,  x )
-> (17) positiveRootA = -0.5*(b-sqrt(b^2-4*a*c))/a

   (18) negativeRootA = GetQuadraticNegativeRoot( a*x^2 + b*x + c = 0,  x )
-> (19) negativeRootA = -0.5*(b+sqrt(b^2-4*a*c))/a

   (20) root2B = GetQuadraticRoots( [a; b; c] )
-> (21) root2B[1] = -0.5*(b+sqrt(b^2-4*a*c))/a
-> (22) root2B[2] = -0.5*(b-sqrt(b^2-4*a*c))/a

   (23) %--------------------------------------------------------------------
   (24) % Example 3: GetCubicRoots      (roots of 3rd-order polynomial).
   (25) %--------------------------------------------------------------------
   (26) SetImaginaryNumber( i )
   (27) Variable  p
   (28) root3A = GetCubicRoots( 3*p^3 + 5*p^2 + 9*p + 17 = 0,   p )
-> (29) root3A = [-1.775053;  0.05419336 - 1.785905*i;  0.05419336 + 1.785905*i]

   (30) root3B = GetCubicRoots( [3, 5, 9, 17] )
-> (31) root3B = [-1.775053, 0.05419336 - 1.785905*i, 0.05419336 + 1.785905*i]

   (32) %--------------------------------------------------------------------
   (33) % Example 4: GetQuarticRoots    (roots of 4th-order polynomial).
   (34) %--------------------------------------------------------------------
   (35) root4A = GetQuarticRoots( 2*p^4 + 3*p^3 + 5*p^2 + 9*p + 17 = 0,   p )
-> (36) root4A = [-1.361636 - 1.014663*i;  -1.361636 + 1.014663*i;  0.6116363
        - 1.604248*i;  0.6116363 + 1.604248*i]

   (37) root4B = GetQuarticRoots( [2, 3, 5, 9, 17] )
-> (38) root4B = [-1.361636 - 1.014663*i, -1.361636 + 1.014663*i, 0.6116363 - 1.604248*i, 0.6116363 + 1.604248*i]

   (39) %--------------------------------------------------------------------
   (40) % Example 5: GetQuinticRoots    (roots of 5th-order polynomial).
   (41) %--------------------------------------------------------------------
   (42) root5A = GetQuinticRoots( p^5 + 2*p^4 + 3*p^3 + 5*p^2 + 9*p + 17 = 0,  p )
-> (43) root5A = [-1.857621;  -0.9475112 - 1.507048*i;  -0.9475112 + 1.507048*i;  
        0.8763218 - 1.455989*i;  0.8763218 + 1.455989*i]

   (44) root5B = GetQuinticRoots( [1, 2, 3, 5, 9, 17] )
-> (45) root5B = [-1.857621, -0.9475112 - 1.507048*i, -0.9475112 + 1.507048*i, 0.8763218 - 1.455989*i, 0.8763218 + 1.455989*i]

   (46) %--------------------------------------------------------------------
   (47) % Example 6: GetPolynomialRoots  (roots of nth-order polynomial).
   (48) %--------------------------------------------------------------------
   (49) root7A = GetPolynomialRoots( p^7 + 2*p^3 + 13 = 0,   p, 7 )  
-> (50) root7A = [-1.348251;  -0.9844658 - 1.16944*i;  -0.9844658 + 1.16944*i;  
        0.3798201 - 1.331288*i;  0.3798201 + 1.331288*i;  1.278771 - 0.7194889*i;  1.278771 + 0.7194889*i]

   (51) root7B = GetPolynomialRoots( [1, 0, 0, 0, 2, 0, 0, 13] )
-> (52) root7B = [-1.348251, -0.9844658 - 1.16944*i, -0.9844658 + 1.16944*i, 
        0.3798201 - 1.331288*i, 0.3798201 + 1.331288*i, 1.278771 - 0.7194889*i, 1.278771 + 0.7194889*i]

   (53) %--------------------------------------------------------------------
   (54) % Example 7: GetPolynomial 
   (55) %--------------------------------------------------------------------
   (56) quadraticFunctionA = GetPolynomial(  [t, 5, 3],  x )
-> (57) quadraticFunctionA = 3 + 5*x + t*x^2

   (58) approximateAsCubic = GetCubicPolynomial( sin(x),  x )
-> (59) approximateAsCubic = [-0.1666667;  0;  1;  0]

   (60) approximateAs5thOrder = GetPolynomial( cos(x),  x, 5 )
-> (61) approximateAs5thOrder = [0;  0.04166667;  0;  -0.5;  0;  1]

