   (1) RigidFrame A, B, C, D, E, F, G
   (2) %--------------------------------------------------------------------
   (3) % Example 1: Rotate (from rotation matrix).
   (4) %--------------------------------------------------------------------
   (5) Variable  R{1:3}{1:3}
   (6) B.Rotate( A, [R11,R12,R13; R21,R22,R23; R31,R32,R33] )
-> (7) B_A = [R11, R12, R13;  R21, R22, R23;  R31, R32, R33]

   (8) %--------------------------------------------------------------------
   (9) % Example 2: Rotate (simple rotation about a unit vector).
   (10) %--------------------------------------------------------------------
   (11) Variable   theta''
   (12) C.Rotate( B, GetUnitVector( Bx> + By> ),  theta )
-> (13) C_B[1,1] = 0.5 + 0.5*cos(theta)
-> (14) C_B[1,2] = 0.5 - 0.5*cos(theta)
-> (15) C_B[1,3] = -0.7071068*sin(theta)
-> (16) C_B[2,1] = 0.5 - 0.5*cos(theta)
-> (17) C_B[2,2] = 0.5 + 0.5*cos(theta)
-> (18) C_B[2,3] = 0.7071068*sin(theta)
-> (19) C_B[3,1] = 0.7071068*sin(theta)
-> (20) C_B[3,2] = -0.7071068*sin(theta)
-> (21) C_B[3,3] = cos(theta)
-> (22) w_C_B> = 0.7071068*theta'*Bx> + 0.7071068*theta'*By>
-> (23) alf_C_B> = 0.7071068*theta''*Bx> + 0.7071068*theta''*By>

   (24) %--------------------------------------------------------------------
   (25) % Example 3: Rotate (successive Body-fixed rotations with 3 angles).
   (26) %--------------------------------------------------------------------
   (27) Variable   q1'', q2'', q3''
   (28) D.Rotate( C, BodyXYZ,   q1, q2, q3 )                 
-> (29) D_C[1,1] = cos(q2)*cos(q3)
-> (30) D_C[1,2] = sin(q3)*cos(q1) + sin(q1)*sin(q2)*cos(q3)
-> (31) D_C[1,3] = sin(q1)*sin(q3) - sin(q2)*cos(q1)*cos(q3)
-> (32) D_C[2,1] = -sin(q3)*cos(q2)
-> (33) D_C[2,2] = cos(q1)*cos(q3) - sin(q1)*sin(q2)*sin(q3)
-> (34) D_C[2,3] = sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1)
-> (35) D_C[3,1] = sin(q2)
-> (36) D_C[3,2] = -sin(q1)*cos(q2)
-> (37) D_C[3,3] = cos(q1)*cos(q2)
-> (38) w_D_C> = (sin(q3)*q2'+cos(q2)*cos(q3)*q1')*Dx> + (cos(q3)*q2'-sin(q3)*
        cos(q2)*q1')*Dy> + (q3'+sin(q2)*q1')*Dz>

-> (39) alf_D_C> = (cos(q3)*q2'*q3'+sin(q3)*q2''+cos(q2)*cos(q3)*q1''-sin(q2)*
        cos(q3)*q1'*q2'-sin(q3)*cos(q2)*q1'*q3')*Dx> + (sin(q2)*sin(q3)*q1'*q2'
        +cos(q3)*q2''-sin(q3)*q2'*q3'-cos(q2)*cos(q3)*q1'*q3'-sin(q3)*cos(q2)*
        q1'')*Dy> + (cos(q2)*q1'*q2'+q3''+sin(q2)*q1'')*Dz>

   (40) %--------------------------------------------------------------------
   (41) % Example 4: Rotate (Euler parameters / quaternions).
   (42) %--------------------------------------------------------------------
   (43) Variable  e0'', e1'', e2'', e3''
   (44) E.Rotate( D,  EulerParameters, e0, e1, e2, e3 )
-> (45) E_D[1,1] = -1 + 2*e0^2 + 2*e1^2
-> (46) E_D[1,2] = 2*e0*e3 + 2*e1*e2
-> (47) E_D[1,3] = 2*e1*e3 - 2*e0*e2
-> (48) E_D[2,1] = 2*e1*e2 - 2*e0*e3
-> (49) E_D[2,2] = -1 + 2*e0^2 + 2*e2^2
-> (50) E_D[2,3] = 2*e0*e1 + 2*e2*e3
-> (51) E_D[3,1] = 2*e0*e2 + 2*e1*e3
-> (52) E_D[3,2] = 2*e2*e3 - 2*e0*e1
-> (53) E_D[3,3] = -1 + 2*e0^2 + 2*e3^2
-> (54) w_E_D> = (2*e0*e1'+2*e3*e2'-2*e1*e0'-2*e2*e3')*Ex> + (2*e0*e2'+2*e1*e3'
        -2*e2*e0'-2*e3*e1')*Ey> + (2*e0*e3'+2*e2*e1'-2*e1*e2'-2*e3*e0')*Ez>

-> (55) alf_E_D> = (2*e0*e1''+2*e3*e2''-2*e1*e0''-2*e2*e3'')*Ex> + (2*e0*e2''+2
        *e1*e3''-2*e2*e0''-2*e3*e1'')*Ey> + (2*e0*e3''+2*e2*e1''-2*e1*e2''-2*
        e3*e0'')*Ez>

   (56) %--------------------------------------------------------------------
   (57) % Example 5: Rotate (Rodrigues parameters / Gibbs vector).
   (58) %--------------------------------------------------------------------
   (59) Variable  rho0'', rho1'', rho2''
   (60) F.Rotate( E,  RodriguesParameters, rho0, rho1, rho2 )
-> (61) F_E[1,1] = (1+rho0^2-rho1^2-rho2^2)/(1+rho0^2+rho1^2+rho2^2)
-> (62) F_E[1,2] = 2*(rho2+rho0*rho1)/(1+rho0^2+rho1^2+rho2^2)
-> (63) F_E[1,3] = -2*(rho1-rho0*rho2)/(1+rho0^2+rho1^2+rho2^2)
-> (64) F_E[2,1] = -2*(rho2-rho0*rho1)/(1+rho0^2+rho1^2+rho2^2)
-> (65) F_E[2,2] = (1+rho1^2-rho0^2-rho2^2)/(1+rho0^2+rho1^2+rho2^2)
-> (66) F_E[2,3] = 2*(rho0+rho1*rho2)/(1+rho0^2+rho1^2+rho2^2)
-> (67) F_E[3,1] = 2*(rho1+rho0*rho2)/(1+rho0^2+rho1^2+rho2^2)
-> (68) F_E[3,2] = -2*(rho0-rho1*rho2)/(1+rho0^2+rho1^2+rho2^2)
-> (69) F_E[3,3] = -(-1+rho0^2+rho1^2-rho2^2)/(1+rho0^2+rho1^2+rho2^2)
-> (70) w_F_E> = -2*(rho1*rho2'-rho0'-rho2*rho1')/(1+rho0^2+rho1^2+rho2^2)*Fx>
        + 2*(rho1'+rho0*rho2'-rho2*rho0')/(1+rho0^2+rho1^2+rho2^2)*Fy> - 2*(rh
        o0*rho1'-rho2'-rho1*rho0')/(1+rho0^2+rho1^2+rho2^2)*Fz>

-> (71) alf_F_E> = 2*(2*(rho0*rho0'+rho1*rho1'+rho2*rho2')*(rho1*rho2'-rho0'-
        rho2*rho1')-(1+rho0^2+rho1^2+rho2^2)*(rho1*rho2''-rho0''-rho2*rho1''))/
        (1+rho0^2+rho1^2+rho2^2)^2*Fx> - 2*(2*(rho0*rho0'+rho1*rho1'+rho2*rho2')
        *(rho1'+rho0*rho2'-rho2*rho0')-(1+rho0^2+rho1^2+rho2^2)*(rho1''+rho0*
        rho2''-rho2*rho0''))/(1+rho0^2+rho1^2+rho2^2)^2*Fy> + 2*(2*(rho0*rho0'+
        rho1*rho1'+rho2*rho2')*(rho0*rho1'-rho2'-rho1*rho0')-(1+rho0^2+rho1^2+rho2^2)
        *(rho0*rho1''-rho2''-rho1*rho0''))/(1+rho0^2+rho1^2+rho2^2)^2*Fz>

   (72) %--------------------------------------------------------------------
   (73) % Example 6: RotateX (simple rotation about Gx> = Fx>).
   (74) %--------------------------------------------------------------------
   (75) G.RotateX( F,  theta )
-> (76) G_F = [1, 0, 0;  0, cos(theta), sin(theta);  0, -sin(theta), cos(theta)]
-> (77) w_G_F> = theta'*Gx>
-> (78) alf_G_F> = theta''*Gx>

   (79) %--------------------------------------------------------------------
   (80) % Note: For more HELP, try:   RotateX   RotateY   RotateZ
