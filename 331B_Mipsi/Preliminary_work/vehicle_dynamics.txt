% MotionGenesis file:  MGTemplateBasic.txt
% Copyright (c) 2009-2021 Motion Genesis LLC.
%--------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  N                % Example: Earth.
RigidBody       A
RigidBody       B
RigidFrame      C
RigidBody       D

Point           BN( B )
Point           DN( D )
%--------------------------------------------------------------------
%   Mathematical declarations.
Variable    qA'', qC''
Variable    vx', vy'
Variable    wB', wD'
Variable    x'', y''


Constant    g = 9.80665 m/s^2    % Earth's gravitational acceleration.
Constant    R = 0.25 m
Constant    L = 1 m
Constant    mA = 600 kg
Constant    m = 25 kg

Constant    IAzz = 150 kg*m^2
Constant    J = 2.4 kg*m^2
Constant    K = 1.2 kg*m^2

Variable   TB % This may be specified, but they said variable
Variable   Tsteer % This may be specified, but they said variable
%--------------------------------------------------------------------
%   Mass and inertia properties.
A.SetMass( mA )
B.SetMass( m )
D.SetMass( m )

A.SetInertia( Acm,  0,  0,  IAzz )
B.SetInertia( Bcm, A, K, J, K )
D.SetInertia( Dcm, C, K, J, K )
%--------------------------------------------------------------------
%   Rotational kinematics.
A.RotateZ( N, qA )
B.SetAngularVelocityAcceleration( A, wB*Ay> )
C.RotateZ( A, qC )
D.SetAngularVelocityAcceleration( A, wD*Cy> )
%--------------------------------------------------------------------
%   Translational kinematics.
Bcm.Translate( No, x*Nx> + y*Ny> )
%Bcm.SetVelocityAcceleration( N, vx*Ax> + vy*Ay> )
BN.SetPositionVelocity( Bcm, -R*Az> )
% Try doing the middle thing above... and then changing the generalized speed to qC' instead of qA'

Acm.Translate( Bcm, L*Ax> )
Dcm.Translate( Acm, L*Ax> )
DN.SetPositionVelocity( Dcm, -R*Cz> )

%--------------------------------------------------------------------
%   Motion constraints (if any).
BcmDirectionBasedVelocityinA> = vx*Ax> + vy*Ay>
VelocityRelationship[1] = Dot ( Bcm.GetVelocity(N) - BcmDirectionBasedVelocityinA>, Ax> )
VelocityRelationship[2] = Dot ( Bcm.GetVelocity(N) - BcmDirectionBasedVelocityinA>, Ay> )
%SolveDt( VelocityRelationship = 0, vx, vy )
SolveDt( VelocityRelationship = 0, x', y' )

MotionConstraint[1] = Dot( BN.GetVelocity(N), Nx>)
MotionConstraint[2] = Dot( BN.GetVelocity(N), Ny>)
MotionConstraint[3] = Dot( DN.GetVelocity(N), Cx>)
MotionConstraint[4] = Dot( DN.GetVelocity(N), Cy>)
SolveDT( Explicit(MotionConstraint, vx, vy) = 0, qA', wB, wD, vy )
Solve( Explicit(qA'') - qA'' = 0, qC' )
%Relate vx, vy to wB wC


%SolveDt( MotionConstraint = 0,  varName1, varName2 )
% Save for later^
%--------------------------------------------------------------------
%   Add relevant contact/distance forces.
%System.AddForceGravity( -g*Ny> )            % Add's gravity force to each massive object.
% Toggle on and off ^
%Q.AddForce( someVector> )                   % External force.
%Q.AddForce( P, actionReactionForce> )       % Law of action/reaction.
%--------------------------------------------------------------------
%   Add relevant torques.
B.AddTorque( A, TB*Ay> )
C.AddTorque( A, Tsteer*Az> )
%--------------------------------------------------------------------
%   Translational dynamic equations (F = m*a).
%   For static analysis, use  B.GetStatics()  or  System.GetStatics().
SetGeneralizedSpeeds( vx, qA' ) % Only doing this works...
%SetGeneralizedSpeeds( vx, qC' )
Dynamics = System.GetDynamicsKane()


%M_matrix = GetCoefficientMatrix( Dynamics, vx', qA'')
M_matrix = GetCoefficientMatrix( Dynamics, vx', qC'')
N_matrix = GetCoefficientMatrix( Dynamics, TB, Tsteer)
R_matrix = Exclude( Dynamics, vx', qA'', TB, Tsteer )

%Explicit(x'' , vx', qA'')
%Use constraint to change to qA for problem output 


%evaluate or substitute control law in...
%Solve( Eq = 0, qA'', qB'' ) % Leave in controlLaw''

Specified vxDes'' 
SetDt( vxDes = 2*t)

Specified qCDes'' 
SetDt( qCDes = (15*pi/180)*sin(t) )

Constant	Kp = 2 s^-1, zeta = 1 noUnits, wn = 2 rad/s

Specified controlLawvx' = vxDes'' + Kp*(vxDes - vx)
Specified controlLawqC'' = qCDes'' + 2*zeta*wn*(qCDes' - qC') + wn^2*(qCDes - qC)
%Eq = [x'' - controlLawX''; z'' - controlLawZ'']

Evaluate( Dynamics, vx' = controlLawvx', qC'' = controlLawqC'')
OutputPlot x m, y m
Input tfinal = 20 sec
Input qA = 0 deg, vx = 0 m/s, qC = 0.1 deg, x = 0 m, y = 0 m
Input controlLawvx = EvaluateAtInput(vx)%, controlLawqC' = EvaluateAtInput(qC')
Input controlLawqC = EvaluateAtInput(qC) % source of the problem may be no vx here...
%Input controlLawX = EvaluateAtInput(x), controlLawZ = EvaluateAtInput(z)
ODE()
stop
quit

%--------------------------------------------------------------------
%   Rotational dynamic equations (M = DH/Dt + ...).
%   For static analysis, use  B.GetStatics( aboutPoint ).
Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
%--------------------------------------------------------------------
%   Solve algebraic equations for list of unknowns.
Solve( Dynamics = 0,   x'', y'', Fx, Fy )


Input qA = 0 deg, vx = 0 m/s, qC = 0.1 deg
% Need to solve at input for derivatives?
% derived from vx
%--------------------------------------------------------------------
%   Energy calculations (if needed).
Variable workDone' = Dot( someForce>, someVelocity> )
KE = System.GetKineticEnergy()
PEgravity = System.GetForceGravityPotentialEnergy( -g*Ny>, No )
MechanicalEnergy = KE + PEgravity - workDone
%--------------------------------------------------------------------
%   Momentum calculations (if needed).
H> = System.GetAngularMomentum( aboutPoint )
L> = EvaluateToNumber( System.GetLinearMomentum() )
%--------------------------------------------------------------------
%   Other calculations (e.g., for output).
xQ = Dot(  Q.GetPosition(No),  Nx>  )
%--------------------------------------------------------------------
%   Set initial values for variables (for subsequent ODE command).
Input  qA = 30 deg,  qA' = 0 rad/sec
Input  qB = 90 deg,  qB' = 0 rad/sec
%--------------------------------------------------------------------
%   List output quantities (e.g., from the ODE command).
Output      t sec,  x m,  Fx Newton,  Fy Newton
OutputPlot  t sec,  qA degrees  qB degrees
%--------------------------------------------------------------------
%   Set numerical integration parameters and solve ODEs.
%   Or auto-generate MATLAB, C, or Fortran code.
Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-07
ODE()  Filename    % or ODE( Zero = 0, listOfVariablesToSolve ) Filename.m
%--------------------------------------------------------------------
%   Record input together with responses.
Save  someFileName.html
Quit

